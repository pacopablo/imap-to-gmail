#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2013, John Hampton <pacopablo@pacopablo.com>
# All rights reserved
#
#
# Author: John Hampton <pacopablo@pacopablo.com>
USAGE = """
IMAP to Gmail Migration Tool

Usage:
  imap_to_gmail genconfig  [--config=FILE]
  imap_to_gmail migrate [--config=FILE]

Options:
  -h help           Show this screen
  --version         Show program version
  --config=FILE     Path to configuration file

Use `imap_to_gmail genconfig` to create a base configuration for the
migration.  Edit the resulting config file (config.json) and then pass it to 
`imap_to_gmail migrate` to move mail from IMAP to Gmail
"""[1:-1]

# Standard Library Imports
import sys
import imaplib
import getpass
import json

# Third Party Imports
from gdata.apps.migration import service
from docopt import docopt

VERSION='0.1.0'

INPUT = {
    'imap_user' : {
        'info': 'Please enter the username to use when logging into the IMAP server.',
        'prompt': 'IMAP username',
        'warning': """
We use the IMAP username to get a list of existing folders from which to
migrate email.  If a username is not provided, you will have to populate
the list of folders to migrate manually."""[1:],
        'warning_condition': lambda x: x == '',
        'hide': False,
    },

    'imap_server' : {
        'info': """
Please enter the IP or hostname of the IMAP server from which email will be
migrated.  If no server is specified, a blank configuration file will be
created."""[1:],
        'prompt': 'IMAP server',
        'warning': """
The server IP or hostname is required to prepopulate the configuration file
used for migration.  If it is not provided, a blank configuration file will be
created.  You will have to fill in the configuration by hand."""[1:],
        'warning_condition': lambda x: x == '',
        'hide': False,
    },

    'imap_password' : {
        'info': """
Please enter the password for the IMAP user.  The password is not stored in
the configuration file, but it is used to pull the configuration from the
IMAP server."""[1:],
        'prompt': 'IMAP password',
        'warning': """
Without the password for the IMAP user, the list of folders to migrate can't
be populated and will need to be done manually."""[1:],
        'warning_condition': lambda x: x == '',
        'hide': True,
    }, 

    'config_path' : {
        'info': '',
        'prompt': '',
        'warning': '',
        'warning_condition': lambda x: x == '',
        'hide': False,
    },

    'folder_list' : {
        'info': '',
        'prompt': '',
        'warning': '',
        'warning_condition': lambda x: False,
        'hide': False,
    },

    'gmail_email' : {
        'info': '',
        'prompt': '',
        'warning': '',
        'warning_condition': lambda x: x == '',
        'hide': False,
    },
}


def get_user_input(prompt_options):
    """Get information from the user via on-screen prompts

    A dicitonary of prompt info is required.  It should contain the following
    keys:

    info: Text provided befor the prompt to explain the information desired
          from the user

    prompt: short prompt for input. The string ' ==> ' will be appended to the
            prompt specified before displying on screen

    warning: a message shown when the user does not provide the information
             requested.  The user will be reprompted for the information

    warning_condition: a callable taking the input from the user and returning
                       whether or not the input given is satisfactory

    hide: whether or not to echo the user input.  Set to True to protect
          password and other sensitive information input

    """

    def get_input(hide):
        if hide:
            user_input = getpass.getpass(prompt_options['prompt'] + ' ==> ')
        else:
            user_input = raw_input(prompt_options['prompt'] + ' ==> ')
        return user_input
        

    print('\n\n' + prompt_options['info'] + '\n')
    input = get_input(prompt_options['hide'])
    if prompt_options['warning_condition'](input):
        print('\n' + prompt_options['warning'] + '\n')
        input = get_input(prompt_options['hide'])

    return input
        


def main(args):
    """ Migrate email from IMAP to Gmail

    """
    global USAGE

    rc = 0
    if args['genconfig']:
        # Ask for IMAP server
        # Ask for IMAP username
        # Ask for IMAP Password
        # Ask for name of output config file [config.json]
        # Ask for name of IMAP folder to place migrated emails
        # Print list of folders
        # Ask for list of excluded folders. [Drafts, Sent, Trash]
        # Ask for Gmail email address
        # Ask for Gmail Admin email address
        # Write out config file
        options = {}
        options['imap_server'] = get_user_input(INPUT['imap_server'])
        options['imap_user'] = get_user_input(INPUT['imap_user']) 
        options['imap_password'] = get_user_input(INPUT['imap_password']) 
        options['config_path'] = get_user_input(INPUT['config_path']) 
        options['folder_list'] = get_user_input(INPUT['folder_list']) 
        options['gmail_email'] = get_user_input(INPUT['gmail_email']) 
        import pprint
        pprint.pprint(options)
    elif args['migrate']:
        print('TODO: migrate data')
        # Perform migration work here
        # Load config file
        # Log into IMAP
        # Migrate email to Gmail
        #   Move read email to INBOX and/or corresponding folder
        #   Move unread email in INBOX to 'Migrated/Unread'
        #   Move unread email in folder to corresponding folder
        # Move mail to "done" IMAP folder
        # If a message fails, move to "done/failed" IMAP folder
    else:
        print(USAGE)
        rc = 1
    return rc

if __name__ == '__main__':
    rc = 0
    args = docopt(USAGE, help=True,
                  version='IMAP to Gmail Migration Tool {0}'.format(VERSION))
    rc = main(args)
    sys.exit(rc)

    
